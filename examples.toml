# package_prefix is for trimming the function name in graph for human readability
package_prefix = "github.com/username/project/"


# focus is for filtering the functions to be included in the graph
[[focus]]
# choose "and" or "or" logic to combine the rules if there are multiple rules
and = true
# match rule for the function name
# there are match type: "contain", "prefix", "suffix", "equal", "regexp"
# can set exclude = true to exclude the matched functions
rules = [{ type = "suffix", content = "funcNameB", exclude = true }, { type = "contain", content = "github.com/username/project/pkgB." }]

# there can be multiple focus
[[focus]]
# can ignore "and" or "or" if there is only one rule
rules = [{ type = "prefix", content = "(*github.com/username/project/pkgAA.structAA)" }]


# ignore is for filtering the functions to be excluded in the graph
[[ignore]]
and = true
rules = [{ type = "regexp", content = ".*funcName.*" }, { type = "equal", content = "(*github.com/username/project/pkgC.structC).FuncC" }]

# ignore is also can be multiple
[[ignore]]
or = true
rules = [{ type = "suffix", content = "funcNameD" }, { type = "prefix", content = "(*github.com/username/project/pkgD.structD)" }]


# layer is a set of matched functions used to generate flow graph. Layers must be defined in order.
[[layer]]
name = "Layer1"
[[layer.entities]]
# match rule for the function name
name = { and = true, rules = [{ type = "contain", content = "github.com/username/project/pkgAA" }, { type = "regexp", content = ".*funcNameD.*" }] }
# match rule for the function signature
signature = { rules = [{ type = "contain", content = "bool" }] }
# match rule for the function insite
in_site = { rules = [{ type = "contain", content = "invoke FuncBB" }] }
# match rule for the function outsite
out_site = { rules = [{ type = "contain", content = "invoke FuncCC" }] }
#another entity
#[[layer.entities]] ...

# the next layer
[[layer]]
name = "Layer2"
# entities ...

# the next layer
[[layer]]
name = "Layer3"
# entities ...